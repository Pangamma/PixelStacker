using FNBT.Tags;
using PixelStacker.Logic.IO.Config;
using PixelStacker.Logic.Model;
using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace PixelStacker.Logic.IO.Formatters
{
    #region Supporting Models

    internal static class LitematicaExtensions
    {
        public static void setLong(this NbtCompound tag, string key, long val)
        {
            tag.Add(new NbtLong(key, val));
        }

        public static void setInteger(this NbtCompound tag, string key, int val)
        {
            tag.Add(new NbtInt(key, val));
        }
    }

    #endregion 

    /// <summary>
    /// Logic is derived from:
    /// https://github.com/maruohon/litematica/blob/master/src/main/java/fi/dy/masa/litematica/schematic/LitematicaSchematic.java
    /// </summary>
    public class LitematicaFormatter : IExportFormatter
    {
        private const int SCHEMATIC_VERSION = 4;
        public async Task ExportAsync(string filePath, PixelStackerProjectData canvas, CancellationToken? worker = null)
        {
            if (File.Exists(filePath)) File.Delete(filePath);
            byte[] data = await ExportAsync(canvas, worker);
            File.WriteAllBytes(filePath, data);
        }

        public class LitematicaMetadata
        {
            public string Name { get; set; } = "NameOfSchematic";
            public string Author { get; set; } = "Taylor Love";
            public string Description { get; set; } = "A litematic generated by PixelStacker.";

            public int RegionCount { get; set; }
            public long TotalVolume { get; set; }
            public long TotalBlocks { get; set; }
            public long TimeCreated { get; set; }
            public long TimeModified { get; set; }

            public int[] ThumbnailPixelData { get; set; }
        }



        //    @Override
        //public Vec3i getEnclosingSize()
        //    {
        //        ImmutableMap<String, ISchematicRegion> regions = this.getRegions();

        //        if (regions.isEmpty() == false)
        //        {
        //            if (regions.size() == 1)
        //            {
        //                for (ISchematicRegion region : regions.values())
        //                {
        //                    return PositionUtils.getAbsoluteAreaSize(region.getSize());
        //                }
        //            }
        //            else
        //            {
        //                List<Box> boxes = new ArrayList<>();

        //                for (ISchematicRegion region : regions.values())
        //                {
        //                    BlockPos pos = region.getPosition();
        //                    Vec3i end = PositionUtils.getRelativeEndPositionFromAreaSize(region.getSize());
        //                    Box box = new Box(pos, pos.add(end));
        //                    boxes.add(box);
        //                }

        //                return PositionUtils.getEnclosingAreaSize(boxes);
        //            }
        //        }

        //        return null;
        //    }


        //[Obsolete("Still needs data for: EnclosingSize")]
        private NbtCompound getMetadata(LitematicaMetadata data)
        {
            var nbt = new NbtCompound("Metadata");
            nbt.Add(new NbtString("Name", data.Name));
            nbt.Add(new NbtString("Author", data.Author));
            nbt.Add(new NbtString("Description", data.Description));
            nbt.Add(new NbtString("Generator", "PixelStacker (" + Constants.Version + ")"));
            nbt.Add(new NbtString("Generator Website", Constants.Website));

            if (data.RegionCount > 0)
            {
                nbt.Add(new NbtInt("RegionCount", data.RegionCount));
            }

            if (data.TotalVolume > 0)
            {
                nbt.setLong("TotalVolume", data.TotalVolume);
            }

            if (data.TotalBlocks >= 0)
            {
                nbt.setLong("TotalBlocks", data.TotalBlocks);
            }

            if (data.TimeCreated > 0)
            {
                nbt.setLong("TimeCreated", data.TimeCreated);
            }

            if (data.TimeModified > 0)
            {
                nbt.setLong("TimeModified", data.TimeModified);
            }

            //nbt.setTag("EnclosingSize", NBTUtils.createBlockPosTag(this.enclosingSize));
            //tag.putInt("x", pos.getX());
            //tag.putInt("y", pos.getY());
            //tag.putInt("z", pos.getZ());

            if (data.ThumbnailPixelData != null)
            {
                nbt.Add(new NbtIntArray("PreviewImageData", data.ThumbnailPixelData));
            }

            return nbt;
        }

        public Task<byte[]> ExportAsync(PixelStackerProjectData canvas, CancellationToken? worker = null)
        {
            bool isv = canvas.IsSideView;
            bool isMultiLayer = canvas.CanvasData.Any(x => canvas.MaterialPalette[x.PaletteID].IsMultiLayer);
            var details = IExportFormatter.ConvertCanvasToDetails(canvas);
            var tag = new NbtCompound();
            tag.Add(new NbtInt("Version", SCHEMATIC_VERSION));
            tag.Add(new NbtInt("MinecraftDataVersion", Constants.DataVersion));
            tag.Add(this.getMetadata(new LitematicaMetadata()
            {
                Author = "Taylor Love",
                Name = "SomeSchematicName",
                Description = "Super awesome pixel art planned with PixelStacker.",
                TimeCreated = (long)DateTime.UtcNow.ToUniversalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds,
                TimeModified = (long)DateTime.UtcNow.ToUniversalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds,
                RegionCount = 0,
                TotalBlocks = 0,
                TotalVolume = 0,
                ThumbnailPixelData = null
            }));

            //nbt.setTag("Regions", this.writeSubRegionsToNBT());
            var wrapper = new NbtCompound("Regions");

            foreach (var region in new int[0])
            {
            }



            byte[] bbData = null;
            return Task.FromResult(bbData);
        }
    }
}
